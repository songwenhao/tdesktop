// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipeCmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipeCmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipeCmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipeCmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipeCmd_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipeCmd_2eproto;
namespace PipeCmd {
class Cmd;
struct CmdDefaultTypeInternal;
extern CmdDefaultTypeInternal _Cmd_default_instance_;
class Cookie;
struct CookieDefaultTypeInternal;
extern CookieDefaultTypeInternal _Cookie_default_instance_;
class Extra;
struct ExtraDefaultTypeInternal;
extern ExtraDefaultTypeInternal _Extra_default_instance_;
}  // namespace PipeCmd
PROTOBUF_NAMESPACE_OPEN
template<> ::PipeCmd::Cmd* Arena::CreateMaybeMessage<::PipeCmd::Cmd>(Arena*);
template<> ::PipeCmd::Cookie* Arena::CreateMaybeMessage<::PipeCmd::Cookie>(Arena*);
template<> ::PipeCmd::Extra* Arena::CreateMaybeMessage<::PipeCmd::Extra>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PipeCmd {

enum ExtraType : int {
  String = 0,
  Num = 1,
  Real = 2,
  Boolean = 3,
  ExtraType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ExtraType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ExtraType_IsValid(int value);
constexpr ExtraType ExtraType_MIN = String;
constexpr ExtraType ExtraType_MAX = Boolean;
constexpr int ExtraType_ARRAYSIZE = ExtraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtraType_descriptor();
template<typename T>
inline const std::string& ExtraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExtraType_descriptor(), enum_t_value);
}
inline bool ExtraType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExtraType>(
    ExtraType_descriptor(), name, value);
}
// ===================================================================

class Extra final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PipeCmd.Extra) */ {
 public:
  inline Extra() : Extra(nullptr) {}
  ~Extra() override;
  explicit PROTOBUF_CONSTEXPR Extra(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extra(const Extra& from);
  Extra(Extra&& from) noexcept
    : Extra() {
    *this = ::std::move(from);
  }

  inline Extra& operator=(const Extra& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extra& operator=(Extra&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extra& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extra* internal_default_instance() {
    return reinterpret_cast<const Extra*>(
               &_Extra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Extra& a, Extra& b) {
    a.Swap(&b);
  }
  inline void Swap(Extra* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extra* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Extra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Extra>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Extra& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Extra& from) {
    Extra::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extra* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PipeCmd.Extra";
  }
  protected:
  explicit Extra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kStringValueFieldNumber = 3,
    kNumValueFieldNumber = 4,
    kRealValueFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes string_value = 3;
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int64 num_value = 4;
  void clear_num_value();
  int64_t num_value() const;
  void set_num_value(int64_t value);
  private:
  int64_t _internal_num_value() const;
  void _internal_set_num_value(int64_t value);
  public:

  // double real_value = 5;
  void clear_real_value();
  double real_value() const;
  void set_real_value(double value);
  private:
  double _internal_real_value() const;
  void _internal_set_real_value(double value);
  public:

  // .PipeCmd.ExtraType type = 1;
  void clear_type();
  ::PipeCmd::ExtraType type() const;
  void set_type(::PipeCmd::ExtraType value);
  private:
  ::PipeCmd::ExtraType _internal_type() const;
  void _internal_set_type(::PipeCmd::ExtraType value);
  public:

  // @@protoc_insertion_point(class_scope:PipeCmd.Extra)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    int64_t num_value_;
    double real_value_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pipeCmd_2eproto;
};
// -------------------------------------------------------------------

class Cookie final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PipeCmd.Cookie) */ {
 public:
  inline Cookie() : Cookie(nullptr) {}
  ~Cookie() override;
  explicit PROTOBUF_CONSTEXPR Cookie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cookie(const Cookie& from);
  Cookie(Cookie&& from) noexcept
    : Cookie() {
    *this = ::std::move(from);
  }

  inline Cookie& operator=(const Cookie& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cookie& operator=(Cookie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cookie& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cookie* internal_default_instance() {
    return reinterpret_cast<const Cookie*>(
               &_Cookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Cookie& a, Cookie& b) {
    a.Swap(&b);
  }
  inline void Swap(Cookie* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cookie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cookie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cookie>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cookie& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cookie& from) {
    Cookie::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cookie* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PipeCmd.Cookie";
  }
  protected:
  explicit Cookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kDomainFieldNumber = 3,
    kPathFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string domain = 3;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:PipeCmd.Cookie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pipeCmd_2eproto;
};
// -------------------------------------------------------------------

class Cmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PipeCmd.Cmd) */ {
 public:
  inline Cmd() : Cmd(nullptr) {}
  ~Cmd() override;
  explicit PROTOBUF_CONSTEXPR Cmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cmd(const Cmd& from);
  Cmd(Cmd&& from) noexcept
    : Cmd() {
    *this = ::std::move(from);
  }

  inline Cmd& operator=(const Cmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cmd& operator=(Cmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cmd* internal_default_instance() {
    return reinterpret_cast<const Cmd*>(
               &_Cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Cmd& a, Cmd& b) {
    a.Swap(&b);
  }
  inline void Swap(Cmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cmd& from) {
    Cmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PipeCmd.Cmd";
  }
  protected:
  explicit Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 4,
    kCookieFieldNumber = 5,
    kUniqueIdFieldNumber = 1,
    kContentFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // repeated .PipeCmd.Extra extra = 4;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  ::PipeCmd::Extra* mutable_extra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Extra >*
      mutable_extra();
  private:
  const ::PipeCmd::Extra& _internal_extra(int index) const;
  ::PipeCmd::Extra* _internal_add_extra();
  public:
  const ::PipeCmd::Extra& extra(int index) const;
  ::PipeCmd::Extra* add_extra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Extra >&
      extra() const;

  // repeated .PipeCmd.Cookie cookie = 5;
  int cookie_size() const;
  private:
  int _internal_cookie_size() const;
  public:
  void clear_cookie();
  ::PipeCmd::Cookie* mutable_cookie(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Cookie >*
      mutable_cookie();
  private:
  const ::PipeCmd::Cookie& _internal_cookie(int index) const;
  ::PipeCmd::Cookie* _internal_add_cookie();
  public:
  const ::PipeCmd::Cookie& cookie(int index) const;
  ::PipeCmd::Cookie* add_cookie();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Cookie >&
      cookie() const;

  // string unique_id = 1;
  void clear_unique_id();
  const std::string& unique_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* unique_id);
  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(const std::string& value);
  std::string* _internal_mutable_unique_id();
  public:

  // bytes content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 action = 2;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PipeCmd.Cmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Extra > extra_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Cookie > cookie_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pipeCmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Extra

// .PipeCmd.ExtraType type = 1;
inline void Extra::clear_type() {
  _impl_.type_ = 0;
}
inline ::PipeCmd::ExtraType Extra::_internal_type() const {
  return static_cast< ::PipeCmd::ExtraType >(_impl_.type_);
}
inline ::PipeCmd::ExtraType Extra::type() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Extra.type)
  return _internal_type();
}
inline void Extra::_internal_set_type(::PipeCmd::ExtraType value) {
  
  _impl_.type_ = value;
}
inline void Extra::set_type(::PipeCmd::ExtraType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PipeCmd.Extra.type)
}

// string key = 2;
inline void Extra::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Extra::key() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Extra.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Extra::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Extra.key)
}
inline std::string* Extra::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Extra.key)
  return _s;
}
inline const std::string& Extra::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Extra::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Extra::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Extra::release_key() {
  // @@protoc_insertion_point(field_release:PipeCmd.Extra.key)
  return _impl_.key_.Release();
}
inline void Extra::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Extra.key)
}

// bytes string_value = 3;
inline void Extra::clear_string_value() {
  _impl_.string_value_.ClearToEmpty();
}
inline const std::string& Extra::string_value() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Extra.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Extra::set_string_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.string_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Extra.string_value)
}
inline std::string* Extra::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Extra.string_value)
  return _s;
}
inline const std::string& Extra::_internal_string_value() const {
  return _impl_.string_value_.Get();
}
inline void Extra::_internal_set_string_value(const std::string& value) {
  
  _impl_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Extra::_internal_mutable_string_value() {
  
  return _impl_.string_value_.Mutable(GetArenaForAllocation());
}
inline std::string* Extra::release_string_value() {
  // @@protoc_insertion_point(field_release:PipeCmd.Extra.string_value)
  return _impl_.string_value_.Release();
}
inline void Extra::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    
  } else {
    
  }
  _impl_.string_value_.SetAllocated(string_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_value_.IsDefault()) {
    _impl_.string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Extra.string_value)
}

// int64 num_value = 4;
inline void Extra::clear_num_value() {
  _impl_.num_value_ = int64_t{0};
}
inline int64_t Extra::_internal_num_value() const {
  return _impl_.num_value_;
}
inline int64_t Extra::num_value() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Extra.num_value)
  return _internal_num_value();
}
inline void Extra::_internal_set_num_value(int64_t value) {
  
  _impl_.num_value_ = value;
}
inline void Extra::set_num_value(int64_t value) {
  _internal_set_num_value(value);
  // @@protoc_insertion_point(field_set:PipeCmd.Extra.num_value)
}

// double real_value = 5;
inline void Extra::clear_real_value() {
  _impl_.real_value_ = 0;
}
inline double Extra::_internal_real_value() const {
  return _impl_.real_value_;
}
inline double Extra::real_value() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Extra.real_value)
  return _internal_real_value();
}
inline void Extra::_internal_set_real_value(double value) {
  
  _impl_.real_value_ = value;
}
inline void Extra::set_real_value(double value) {
  _internal_set_real_value(value);
  // @@protoc_insertion_point(field_set:PipeCmd.Extra.real_value)
}

// -------------------------------------------------------------------

// Cookie

// string name = 1;
inline void Cookie::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Cookie::name() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cookie.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cookie::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Cookie.name)
}
inline std::string* Cookie::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cookie.name)
  return _s;
}
inline const std::string& Cookie::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Cookie::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Cookie::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Cookie::release_name() {
  // @@protoc_insertion_point(field_release:PipeCmd.Cookie.name)
  return _impl_.name_.Release();
}
inline void Cookie::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Cookie.name)
}

// string value = 2;
inline void Cookie::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Cookie::value() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cookie.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cookie::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Cookie.value)
}
inline std::string* Cookie::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cookie.value)
  return _s;
}
inline const std::string& Cookie::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Cookie::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Cookie::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Cookie::release_value() {
  // @@protoc_insertion_point(field_release:PipeCmd.Cookie.value)
  return _impl_.value_.Release();
}
inline void Cookie::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Cookie.value)
}

// string domain = 3;
inline void Cookie::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& Cookie::domain() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cookie.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cookie::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Cookie.domain)
}
inline std::string* Cookie::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cookie.domain)
  return _s;
}
inline const std::string& Cookie::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void Cookie::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* Cookie::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* Cookie::release_domain() {
  // @@protoc_insertion_point(field_release:PipeCmd.Cookie.domain)
  return _impl_.domain_.Release();
}
inline void Cookie::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Cookie.domain)
}

// string path = 4;
inline void Cookie::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Cookie::path() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cookie.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cookie::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Cookie.path)
}
inline std::string* Cookie::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cookie.path)
  return _s;
}
inline const std::string& Cookie::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Cookie::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Cookie::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Cookie::release_path() {
  // @@protoc_insertion_point(field_release:PipeCmd.Cookie.path)
  return _impl_.path_.Release();
}
inline void Cookie::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Cookie.path)
}

// -------------------------------------------------------------------

// Cmd

// string unique_id = 1;
inline void Cmd::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& Cmd::unique_id() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cmd.unique_id)
  return _internal_unique_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cmd::set_unique_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unique_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Cmd.unique_id)
}
inline std::string* Cmd::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cmd.unique_id)
  return _s;
}
inline const std::string& Cmd::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void Cmd::_internal_set_unique_id(const std::string& value) {
  
  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Cmd::_internal_mutable_unique_id() {
  
  return _impl_.unique_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Cmd::release_unique_id() {
  // @@protoc_insertion_point(field_release:PipeCmd.Cmd.unique_id)
  return _impl_.unique_id_.Release();
}
inline void Cmd::set_allocated_unique_id(std::string* unique_id) {
  if (unique_id != nullptr) {
    
  } else {
    
  }
  _impl_.unique_id_.SetAllocated(unique_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unique_id_.IsDefault()) {
    _impl_.unique_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Cmd.unique_id)
}

// int32 action = 2;
inline void Cmd::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t Cmd::_internal_action() const {
  return _impl_.action_;
}
inline int32_t Cmd::action() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cmd.action)
  return _internal_action();
}
inline void Cmd::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void Cmd::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:PipeCmd.Cmd.action)
}

// bytes content = 3;
inline void Cmd::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Cmd::content() const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cmd.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cmd::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PipeCmd.Cmd.content)
}
inline std::string* Cmd::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cmd.content)
  return _s;
}
inline const std::string& Cmd::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Cmd::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Cmd::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Cmd::release_content() {
  // @@protoc_insertion_point(field_release:PipeCmd.Cmd.content)
  return _impl_.content_.Release();
}
inline void Cmd::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PipeCmd.Cmd.content)
}

// repeated .PipeCmd.Extra extra = 4;
inline int Cmd::_internal_extra_size() const {
  return _impl_.extra_.size();
}
inline int Cmd::extra_size() const {
  return _internal_extra_size();
}
inline void Cmd::clear_extra() {
  _impl_.extra_.Clear();
}
inline ::PipeCmd::Extra* Cmd::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cmd.extra)
  return _impl_.extra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Extra >*
Cmd::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:PipeCmd.Cmd.extra)
  return &_impl_.extra_;
}
inline const ::PipeCmd::Extra& Cmd::_internal_extra(int index) const {
  return _impl_.extra_.Get(index);
}
inline const ::PipeCmd::Extra& Cmd::extra(int index) const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cmd.extra)
  return _internal_extra(index);
}
inline ::PipeCmd::Extra* Cmd::_internal_add_extra() {
  return _impl_.extra_.Add();
}
inline ::PipeCmd::Extra* Cmd::add_extra() {
  ::PipeCmd::Extra* _add = _internal_add_extra();
  // @@protoc_insertion_point(field_add:PipeCmd.Cmd.extra)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Extra >&
Cmd::extra() const {
  // @@protoc_insertion_point(field_list:PipeCmd.Cmd.extra)
  return _impl_.extra_;
}

// repeated .PipeCmd.Cookie cookie = 5;
inline int Cmd::_internal_cookie_size() const {
  return _impl_.cookie_.size();
}
inline int Cmd::cookie_size() const {
  return _internal_cookie_size();
}
inline void Cmd::clear_cookie() {
  _impl_.cookie_.Clear();
}
inline ::PipeCmd::Cookie* Cmd::mutable_cookie(int index) {
  // @@protoc_insertion_point(field_mutable:PipeCmd.Cmd.cookie)
  return _impl_.cookie_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Cookie >*
Cmd::mutable_cookie() {
  // @@protoc_insertion_point(field_mutable_list:PipeCmd.Cmd.cookie)
  return &_impl_.cookie_;
}
inline const ::PipeCmd::Cookie& Cmd::_internal_cookie(int index) const {
  return _impl_.cookie_.Get(index);
}
inline const ::PipeCmd::Cookie& Cmd::cookie(int index) const {
  // @@protoc_insertion_point(field_get:PipeCmd.Cmd.cookie)
  return _internal_cookie(index);
}
inline ::PipeCmd::Cookie* Cmd::_internal_add_cookie() {
  return _impl_.cookie_.Add();
}
inline ::PipeCmd::Cookie* Cmd::add_cookie() {
  ::PipeCmd::Cookie* _add = _internal_add_cookie();
  // @@protoc_insertion_point(field_add:PipeCmd.Cmd.cookie)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PipeCmd::Cookie >&
Cmd::cookie() const {
  // @@protoc_insertion_point(field_list:PipeCmd.Cmd.cookie)
  return _impl_.cookie_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PipeCmd

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PipeCmd::ExtraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PipeCmd::ExtraType>() {
  return ::PipeCmd::ExtraType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipeCmd_2eproto
