// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipeCmd.proto

#include "pipeCmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace PipeCmd {
PROTOBUF_CONSTEXPR Extra::Extra(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_value_)*/int64_t{0}
  , /*decltype(_impl_.real_value_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtraDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtraDefaultTypeInternal() {}
  union {
    Extra _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtraDefaultTypeInternal _Extra_default_instance_;
PROTOBUF_CONSTEXPR Cookie::Cookie(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CookieDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CookieDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CookieDefaultTypeInternal() {}
  union {
    Cookie _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CookieDefaultTypeInternal _Cookie_default_instance_;
PROTOBUF_CONSTEXPR Cmd::Cmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_)*/{}
  , /*decltype(_impl_.cookie_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seq_number_)*/int64_t{0}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CmdDefaultTypeInternal() {}
  union {
    Cmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CmdDefaultTypeInternal _Cmd_default_instance_;
}  // namespace PipeCmd
static ::_pb::Metadata file_level_metadata_pipeCmd_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pipeCmd_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pipeCmd_2eproto = nullptr;

const uint32_t TableStruct_pipeCmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Extra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Extra, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Extra, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Extra, _impl_.string_value_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Extra, _impl_.num_value_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Extra, _impl_.real_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cookie, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cookie, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cookie, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cookie, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cmd, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cmd, _impl_.seq_number_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cmd, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cmd, _impl_.extra_),
  PROTOBUF_FIELD_OFFSET(::PipeCmd::Cmd, _impl_.cookie_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PipeCmd::Extra)},
  { 11, -1, -1, sizeof(::PipeCmd::Cookie)},
  { 21, -1, -1, sizeof(::PipeCmd::Cmd)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::PipeCmd::_Extra_default_instance_._instance,
  &::PipeCmd::_Cookie_default_instance_._instance,
  &::PipeCmd::_Cmd_default_instance_._instance,
};

const char descriptor_table_protodef_pipeCmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpipeCmd.proto\022\007PipeCmd\"s\n\005Extra\022 \n\004typ"
  "e\030\001 \001(\0162\022.PipeCmd.ExtraType\022\013\n\003key\030\002 \001(\t"
  "\022\024\n\014string_value\030\003 \001(\t\022\021\n\tnum_value\030\004 \001("
  "\003\022\022\n\nreal_value\030\005 \001(\001\"C\n\006Cookie\022\014\n\004name\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\014\n\004"
  "path\030\004 \001(\t\"z\n\003Cmd\022\016\n\006action\030\001 \001(\005\022\022\n\nseq"
  "_number\030\002 \001(\003\022\017\n\007content\030\003 \001(\t\022\035\n\005extra\030"
  "\004 \003(\0132\016.PipeCmd.Extra\022\037\n\006cookie\030\005 \003(\0132\017."
  "PipeCmd.Cookie*7\n\tExtraType\022\n\n\006String\020\000\022"
  "\007\n\003Num\020\001\022\010\n\004Real\020\002\022\013\n\007Boolean\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_pipeCmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pipeCmd_2eproto = {
    false, false, 399, descriptor_table_protodef_pipeCmd_2eproto,
    "pipeCmd.proto",
    &descriptor_table_pipeCmd_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_pipeCmd_2eproto::offsets,
    file_level_metadata_pipeCmd_2eproto, file_level_enum_descriptors_pipeCmd_2eproto,
    file_level_service_descriptors_pipeCmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pipeCmd_2eproto_getter() {
  return &descriptor_table_pipeCmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pipeCmd_2eproto(&descriptor_table_pipeCmd_2eproto);
namespace PipeCmd {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pipeCmd_2eproto);
  return file_level_enum_descriptors_pipeCmd_2eproto[0];
}
bool ExtraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Extra::_Internal {
 public:
};

Extra::Extra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PipeCmd.Extra)
}
Extra::Extra(const Extra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Extra* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.num_value_){}
    , decltype(_impl_.real_value_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_string_value().empty()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.num_value_, &from._impl_.num_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.num_value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:PipeCmd.Extra)
}

inline void Extra::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.num_value_){int64_t{0}}
    , decltype(_impl_.real_value_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Extra::~Extra() {
  // @@protoc_insertion_point(destructor:PipeCmd.Extra)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Extra::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.string_value_.Destroy();
}

void Extra::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Extra::Clear() {
// @@protoc_insertion_point(message_clear_start:PipeCmd.Extra)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.string_value_.ClearToEmpty();
  ::memset(&_impl_.num_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.num_value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extra::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PipeCmd.ExtraType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::PipeCmd::ExtraType>(val));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PipeCmd.Extra.key"));
        } else
          goto handle_unusual;
        continue;
      // string string_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PipeCmd.Extra.string_value"));
        } else
          goto handle_unusual;
        continue;
      // int64 num_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double real_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.real_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Extra::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PipeCmd.Extra)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PipeCmd.ExtraType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PipeCmd.Extra.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string string_value = 3;
  if (!this->_internal_string_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PipeCmd.Extra.string_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string_value(), target);
  }

  // int64 num_value = 4;
  if (this->_internal_num_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_value(), target);
  }

  // double real_value = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_real_value = this->_internal_real_value();
  uint64_t raw_real_value;
  memcpy(&raw_real_value, &tmp_real_value, sizeof(tmp_real_value));
  if (raw_real_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_real_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PipeCmd.Extra)
  return target;
}

size_t Extra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PipeCmd.Extra)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string string_value = 3;
  if (!this->_internal_string_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_value());
  }

  // int64 num_value = 4;
  if (this->_internal_num_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_value());
  }

  // double real_value = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_real_value = this->_internal_real_value();
  uint64_t raw_real_value;
  memcpy(&raw_real_value, &tmp_real_value, sizeof(tmp_real_value));
  if (raw_real_value != 0) {
    total_size += 1 + 8;
  }

  // .PipeCmd.ExtraType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Extra::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Extra::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Extra::GetClassData() const { return &_class_data_; }


void Extra::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Extra*>(&to_msg);
  auto& from = static_cast<const Extra&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PipeCmd.Extra)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_string_value().empty()) {
    _this->_internal_set_string_value(from._internal_string_value());
  }
  if (from._internal_num_value() != 0) {
    _this->_internal_set_num_value(from._internal_num_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_real_value = from._internal_real_value();
  uint64_t raw_real_value;
  memcpy(&raw_real_value, &tmp_real_value, sizeof(tmp_real_value));
  if (raw_real_value != 0) {
    _this->_internal_set_real_value(from._internal_real_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Extra::CopyFrom(const Extra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PipeCmd.Extra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extra::IsInitialized() const {
  return true;
}

void Extra::InternalSwap(Extra* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extra, _impl_.type_)
      + sizeof(Extra::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Extra, _impl_.num_value_)>(
          reinterpret_cast<char*>(&_impl_.num_value_),
          reinterpret_cast<char*>(&other->_impl_.num_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extra::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pipeCmd_2eproto_getter, &descriptor_table_pipeCmd_2eproto_once,
      file_level_metadata_pipeCmd_2eproto[0]);
}

// ===================================================================

class Cookie::_Internal {
 public:
};

Cookie::Cookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PipeCmd.Cookie)
}
Cookie::Cookie(const Cookie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cookie* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PipeCmd.Cookie)
}

inline void Cookie::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cookie::~Cookie() {
  // @@protoc_insertion_point(destructor:PipeCmd.Cookie)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cookie::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.path_.Destroy();
}

void Cookie::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cookie::Clear() {
// @@protoc_insertion_point(message_clear_start:PipeCmd.Cookie)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.domain_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cookie::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PipeCmd.Cookie.name"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PipeCmd.Cookie.value"));
        } else
          goto handle_unusual;
        continue;
      // string domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PipeCmd.Cookie.domain"));
        } else
          goto handle_unusual;
        continue;
      // string path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PipeCmd.Cookie.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cookie::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PipeCmd.Cookie)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PipeCmd.Cookie.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PipeCmd.Cookie.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string domain = 3;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PipeCmd.Cookie.domain");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_domain(), target);
  }

  // string path = 4;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PipeCmd.Cookie.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PipeCmd.Cookie)
  return target;
}

size_t Cookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PipeCmd.Cookie)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string domain = 3;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // string path = 4;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cookie::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cookie::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cookie::GetClassData() const { return &_class_data_; }


void Cookie::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cookie*>(&to_msg);
  auto& from = static_cast<const Cookie&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PipeCmd.Cookie)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cookie::CopyFrom(const Cookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PipeCmd.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cookie::IsInitialized() const {
  return true;
}

void Cookie::InternalSwap(Cookie* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Cookie::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pipeCmd_2eproto_getter, &descriptor_table_pipeCmd_2eproto_once,
      file_level_metadata_pipeCmd_2eproto[1]);
}

// ===================================================================

class Cmd::_Internal {
 public:
};

Cmd::Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PipeCmd.Cmd)
}
Cmd::Cmd(const Cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_){from._impl_.extra_}
    , decltype(_impl_.cookie_){from._impl_.cookie_}
    , decltype(_impl_.content_){}
    , decltype(_impl_.seq_number_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.seq_number_, &from._impl_.seq_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.seq_number_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:PipeCmd.Cmd)
}

inline void Cmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_){arena}
    , decltype(_impl_.cookie_){arena}
    , decltype(_impl_.content_){}
    , decltype(_impl_.seq_number_){int64_t{0}}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cmd::~Cmd() {
  // @@protoc_insertion_point(destructor:PipeCmd.Cmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_.~RepeatedPtrField();
  _impl_.cookie_.~RepeatedPtrField();
  _impl_.content_.Destroy();
}

void Cmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:PipeCmd.Cmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_.Clear();
  _impl_.cookie_.Clear();
  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.seq_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_) -
      reinterpret_cast<char*>(&_impl_.seq_number_)) + sizeof(_impl_.action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seq_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seq_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PipeCmd.Cmd.content"));
        } else
          goto handle_unusual;
        continue;
      // repeated .PipeCmd.Extra extra = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PipeCmd.Cookie cookie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cookie(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PipeCmd.Cmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_action(), target);
  }

  // int64 seq_number = 2;
  if (this->_internal_seq_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seq_number(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PipeCmd.Cmd.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // repeated .PipeCmd.Extra extra = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .PipeCmd.Cookie cookie = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cookie_size()); i < n; i++) {
    const auto& repfield = this->_internal_cookie(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PipeCmd.Cmd)
  return target;
}

size_t Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PipeCmd.Cmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PipeCmd.Extra extra = 4;
  total_size += 1UL * this->_internal_extra_size();
  for (const auto& msg : this->_impl_.extra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PipeCmd.Cookie cookie = 5;
  total_size += 1UL * this->_internal_cookie_size();
  for (const auto& msg : this->_impl_.cookie_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int64 seq_number = 2;
  if (this->_internal_seq_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seq_number());
  }

  // int32 action = 1;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cmd::GetClassData() const { return &_class_data_; }


void Cmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cmd*>(&to_msg);
  auto& from = static_cast<const Cmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PipeCmd.Cmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_.MergeFrom(from._impl_.extra_);
  _this->_impl_.cookie_.MergeFrom(from._impl_.cookie_);
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_seq_number() != 0) {
    _this->_internal_set_seq_number(from._internal_seq_number());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cmd::CopyFrom(const Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PipeCmd.Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd::IsInitialized() const {
  return true;
}

void Cmd::InternalSwap(Cmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extra_.InternalSwap(&other->_impl_.extra_);
  _impl_.cookie_.InternalSwap(&other->_impl_.cookie_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cmd, _impl_.action_)
      + sizeof(Cmd::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(Cmd, _impl_.seq_number_)>(
          reinterpret_cast<char*>(&_impl_.seq_number_),
          reinterpret_cast<char*>(&other->_impl_.seq_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pipeCmd_2eproto_getter, &descriptor_table_pipeCmd_2eproto_once,
      file_level_metadata_pipeCmd_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PipeCmd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PipeCmd::Extra*
Arena::CreateMaybeMessage< ::PipeCmd::Extra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PipeCmd::Extra >(arena);
}
template<> PROTOBUF_NOINLINE ::PipeCmd::Cookie*
Arena::CreateMaybeMessage< ::PipeCmd::Cookie >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PipeCmd::Cookie >(arena);
}
template<> PROTOBUF_NOINLINE ::PipeCmd::Cmd*
Arena::CreateMaybeMessage< ::PipeCmd::Cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PipeCmd::Cmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
